Stream 平替集合、数组
List<String> newArray=array.stream().filter(a -> s.contains("..").fliter(b -> b.length()>3)&&..).collect(Collectors.toList());//从array数组里...到newArray
集合数组转stream
Stream<int/String> b = Arrays.stream(a)或Stream.of(a);//a->b 
Map转stream
Set<Map.Entry<Integer,String>> b = a.entrySet();
String<Map.Entry<Integer,String>> c =b.stream();
MapStream调取
c.filter(a -> a.getKey()或.getValue())
中端
筛选filter(a -> a条件)
筛选数目.limit(4) //前四个
升序 筛选.sorted() //只可用于集合数组型
降序 filter(a -> a.getObject() >4).sorted((o1,o2) -> o2.getObject()-o1.getObject())
或 .sort((o1,o2)->Double.compare(o2.getObject(),o1.getObject()))
跳过.skip(a.size()-2)
复合与去重filter(a->a.getId()>4).map(a->a.getName()或Array::getName).distinct()
去重 distinct() //应用于map时，需重写equals与hasCode
并流
Stream<String> a1 =Stream.of("a","b");
Stream<String> a2 =Stream.of("c","d","f");
Stream<Object> a = Stream.concat(a1,a2);
终端 不可分别多次终端
.forEach(a -> System.out.println(a)或System.out::println);
long a = .count(); //数据个数
Array a .max/min((o1,o2)->Double.compare(o1.getObject(),o2.getObject())).get() //最值
List<Array> array = .collect(Collectors.toList()); //stream转List
Set<Array> array = .collect(Collectors.toSet()); //stream转Set
Map<String,String> map = .collect(Collectors.toMap(a->a.getName(),a->a.getId())); stream转Map
Object[] array =.toArray(); stream转数组
Array[] array = .toArray(len ->new Array[len]); stream转自定义数组

递归 以阶乘为例
public static int f(int n){
if(n==1){return 1;}
else{return f(n-1)*n;}
}

窗口
JFrame win = new JFrame("登录界面");
JPanel panel = new JPanel();
win.add(panel);
JButton btn = new JButton("登录");
panel.add(btn);
btn.addActionListener(e->JOptionPane.showMessageDialog(win,"正在登录"));
win.setSize(400,400);
win.setLocationRelativeTo(null);
win.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
win.setVisible(true);

多线程 顺序随机
法一继承
public class{
public class An extends Thread{
	@Override
	public void run(){
		内容;
	}
}}
public static void main(String[] args){
	Thread t = new An();
	t.start();
	或
	Bn bn = new Bn(4,14);
	new An(bn).start();
}
法二Runnable接口
public class An implements Runnable{
	@Override
	public void run(){
		内容;
	}
}
public class{
public static void main(String[] args){
	Runnable t = new An();
	new Thread(t).start();
}}
或匿名内部类
public class{
	public static void main(String[] args){
	new Thread(()->{
		内容;
	}).start();
}}
法三Callable接口
class implements Callable<String>{
private int n;
public An(int n){this.n=n;}
	@Override
	public String call() throws Exception{
		内容;
		return n;
	}
}
public class throws Exception {
	public static void main(String[] args){
	Callable<String> call = new An(n);
	FutureTask<String> f1 = new FutureTask<>(call);
	new Thread(f1).start();
	System.out.println(f1.get());
}}

Thread方法
Thread n = Thread.currentThread();//得到目前线程
Thread t = new An();
t.getName();
n.getName();//线程名字 同名-0 -1 -2
t.setName("名字");
或
Thread t = new An("名字");
class{
public An(String name);
super(name);}//设置名字
Thread.sleep(5000);//暂停5s
t.start();
t.join();//保证t1执行完

线程安全 
法一 加锁this或An.class(静态方法用类名.class)组 字符串全部
synchronized(this){内容;}
法二 同步方法
public synchronized void An(){;}
法三 自定义锁
private final Lock lk = new ReentrantLock();
try{lk.lock();//加锁
this.notify();//唤醒同锁线程前某变量 唤醒:wait或被锁
this.notifyAll();//唤醒同锁线程所有变量
this.wait();//等待此变量}
catch(Exception e){e.printStackTrace();}
finally{lk.unlock();//解锁}

线程池
ExecutorService pool = new ThreadPoolExecutor(3,5,8,TimeUnit.SECONDS,new ArrayBlockingQueue<>(4),Executors.defaultThreadFactary(),new ThreadPoolExecutor.xx);//核心(计算cpu+1,IOcpu*2),最大,临时时,时单位,任务队列4个,线程工厂,线程拒绝
线程拒绝
AbortPolicy()//抛异常
DiscardOldestPolicy()//抛等待最久
CallerRunsPolicy()//主线程处理
pool.shutdown();//结束关闭
pool.shutdownNow();//立即关闭

线程池Runnable
class An implement Runnable{
	@Override
	public void use(){内容;}
	Thread.sleep(1000);
}
class{
	public static void main(String[] args){
	ExecutorService pool = new ThreadPoolExecutor(3,5,8,TimeUnit.SECONDS,new ArrayBlockingQueue<>(4),Executors.defaultThreadFactary(),new ThreadPoolExecutor.AbortPolicy());
	Runnable target = new An();
	pool.execute(target);
	pool.shutdown();
	pool.shutdownNow();
	}
}
线程池Callable
class An implement Runnable{
	private int n;
	public Bn(int n){this.n=n;}
	@Override
	public String use() throws Exception{内容;return n;}
	Thread.sleep(1000);
}
class{
	public static void main(String[] args) throws Exception{
	ExecutorService pool = new ThreadPoolExecutor(3,5,8,TimeUnit.SECONDS,new ArrayBlockingQueue<>(4),Executors.defaultThreadFactary(),new ThreadPoolExecutor.AbortPolicy());
	Future<String> f1 submit = pool.submit(new An(100));
	System.out.println(f1.get());
	}
}
线程池Executors 不推荐
ExecutorService pool = Executor.newFixedThreadPool(3);

并发、并行
并发依次 并行同步 并发并行同时
生命周期
New新建.start() Runnable可运行 Teminated被终止 Blocked 阻塞 Waiting无限等待 Time Waiting计时等待

乐观锁
private AtomicInteger count = new AtomicInteger();//Atomic整数锁 this法
System.out.println(count.incrementAndGet());//整数锁++;

网络通信

IP 计算机 127.0.0.1 / localhost 本地ip
IPv4 32bit->点分十进制
IPv6
IP域名 即ip地址 .com .cn
cmd查看ip ipconfig
cmd检查网络 ping 主机ip地址
InetAddress ip1 = InetAddress.getLocalHost();//找本地ip
InetAddress ip2 = InetAddress.getByName(域名或ip地址);//以域名找ip
ip1.getHostName();//名称或域名
ip1.getHostAddress();//ip地址
ip2.isReachable(6000);6s内本地是否与ip联通

端口 软件
注册端口1024-49151

协议
TCP/IP
应用层 HTTP FTP SMTP
传输层 UDP TCP 选择协议层
UDP  无连接不可靠高效率
客户端
DatagramSocket socket = new DatagramSocket();//默认随机分配端口,可输入定义
while(true){//多发循环
String msg = sc.nextLine();
if("exit".equals(msg)){socket.close();break;}
byte[] bytes = msg.getBytes();//将数据转为字节数组
DatagramPacket packet = new DatagramPacket(bytes,bytes.length,InetAddress,getLocalHost(),6666);//数据,字节数,服务端(此为本地),端口(此为6666) 打包
socket.send(packet);//发送
}
服务端//多连修改多实例
DatagramSocket socket = new DatagramSocket(6666);//注册端口6666
byte[] buffer = new byte[1024*64];
DatagramPacket packet = new DatagramPacket(buffer,buffer.length);//接收数组,接受数组大小
while(true){//多发循环
socket.receive(packet);//无数据阻塞
int len = packet.getLength();//数据大小
packet.getAddress().getHostAddress();//客户端名称
packet.getPort();//客户端端口
String rs = new String(buffer,0,len);//转字符串
//socket.close();多发不关
}

TCP 三次握手四次挥手
客户端
Socket socket = new Socket(InetAddress,getLocalHost(),6666);//服务端(此为本地),端口(此为6666) 打包
new ClentReaderThread(socket).start();//端口互联用
OutputStream os = socket.getOutputStream();//字符输出流
DataOutputStream dos = new DataOutputStream(os);//数据输出流
while(true){//多发循环
String msg = sc.nextLine();
if("exit".equals(msg)){dos.close();socket.close();break;}
dos.writeUTF(msg);//发送
dos.flush();//多发刷新
}
public class ClentReaderThread extends Thread{//端口互联用
	private Socket socket;
	public ServerReaderThread(Socket socket){
	this.socket = socket;
	}
	@Override
	public void run(){
	try{
	InputSteam is = socket.getInputStream();
	DataInputStream dis = new DataInputStream(is);
	while(true){
		try{
			String msg = dis.readUTF();
			System.out.println(msg);
			sendMsgToAll(msg);}catch(Exception){
			}}}catch(Exception e){System.out.println("下线"+socket.getRemoteSocketAddress());break;dis.close();socket.close();}
	}
}
服务端
ServerSocket serverSocket = new ServerSocket(6666);
Socket socket = serverSocket.accept();
InputStream is = socket.getInputStream();
DataInputStream dis = new DataInputStream(is);
while(true){//多发循环
try{
String rs = dis.readUTF();//接收
}catch(Exception e){System.out.println("离线"+socket.getRemoteSocketAddress()//客户端地址);break;dis.close();socket.close();}
}
多客户端//多连修改多实例
public static List<Socket> onLineSockets = new ArrayList<>();
ServerSocket serverSocket = new ServerSocket(6666);
while(true){
Socket socket = serverSocket.accept();
onLineSockets.add(socket);//记录端口 端口互联用
System.out.println("添加"+socket.getRemoteSocketAddress());
new ServerReaderThread(socket).start();
}
public class ServerReaderThread extends Thread{
	private Socket socket;
	public ServerReaderThread(Socket socket){
	this.socket = socket;
	}
	@Override
	public void run(){
	try{
	InputSteam is = socket.getInputStream();
	DataInputStream dis = new DataInputStream(is);
	while(true){
		try{
			String msg = dis.readUTF();
			System.out.println(msg);
			sendMsgToAll(msg);}catch(Exception){
			}}}catch(Exception e){System.out.println("下线"+socket.getRemoteSocketAddress());Server.onLineSockets.remove(socket);//抹去记录break;dis.close();socket.close();}
	}
}
	private void sendMsgToAll(String msg){
	for(Socket onLineSocket : Server.onLineSockets){
		OutputStream os = onLineSocket.getOutputStream();
		DataOutputStream dos = new DataOutputStream(os);
		dos.writeUTF(msg);
		dos.flush();
	}
	}
}
网页服务端 http://ip:端口
ServerSocket serverSocket = new ServerSocket(6666);
ThreadPoolExecutor pool = new ThreadPoolExecutor(8*2,8*2,0, TimeUnit.SECONDS,new ArrayBlockingQueue<>(8), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());
while(true){
	Socket socket = serverSocket.accept();
	pool.execute(new ServerReaderRunnable(socket));
}
public class ServerReaderRunnable implements Runnable{
	private Socket socket;
	public ServerReaderRunnable(Socket socket){
	this.socket=socket;
	}
	@Override
	public void run(){
	try{
	OutputStream os = socket.getOutputStream();
	PrintStream ps = new PrintStream(os);
	ps.println("HTTP/1.1 200 OK");
	ps.println("Content-Type:text/html;charset=UTF-8");
	ps.println();//格式
	ps.println("<div style='color=red;font-size:120px;text-align:center'>乐子</div>");
	ps.close();socket.close();}catch(Exception e){e.printStackTrace();}
	}
}

Junit单元测试
public class use{
	public static void useA(String a){
	if(a == null){return -1;}
	return a.length();
	}
}
public class useText{
	@Test
	public void textUse(){
	int num = use.useA("great!");
	}
}//Run"useA()" 或 Run"All Tests"
断言机制
Assert.assertEquals("有bug",5,num);
注解
@Test
@Before 每个Test前执行一次
@After 每个Test后执行一次
@BeforeClass 修饰static方法,所有Test前执行一次
@AfterClass 修饰static方法,所有Test后执行一次

反射 框架底层
提取class对象
Class c1 = use.class();//提取class对象
Class c2 = Class.forName(c1);//提取class对象
Use a = new Use();
Class c3 = a.getClass();//提取class对象
c1.getName();包名+类名
c1.getSimpleName();类名

构造器
Class a = Use.class;
Constructor[] constructors = a.getConstructors();//全部public
a.getDeclaredConstructors();//公私方法
Constructor constructor = a.getConstructor();//某无参 String.class,int class字符串与整数参类
a.getDeclaredConstructor();
for(Constructor constructor : constructors){
	System.out.println(constructor.getName()+" "+constructor.getParameterCount());}//强遍历方法与内参数数量
赋值构造器
constructor.setAccessible(true);//暴力赋值私有
Use use = (Use) constructor.newInstance();//无参
Use use = (Use) constructor.newInstance("xx",4);

static变量
Class a = Use.class;
Field[] fields = a.getDeclaredFields();//全部变量
for(Field field : fields){System.out.println(field.getName()+" "+field.getType());}//强遍历变量名与变量类型
Field fName = a.getDeclaredFields("名");//以名定位变量
赋值
fName.setAccessible(true);//暴力赋值私有
Use a = new Use();//a是无参构造器
fName.set(a,"xxx");"名"赋值为"xxx"
取值
String name = (String) fName.get(a);

static方法
Class a = Use.class;
Method[] methods = a.getDeclaredMethods();//全部方法
Method method = a.getDeclaredMethod("方法名",参数类型);//某个方法,无参不填,如String.class
for(Method method : methods){System.out.println(method.getName()+" "+method.getParameterCount()+" "+method.getReturnType();}//强遍历方法名,参数个数与方法类型
方法执行
Use a = new Use();
a.setAccessible(true);//暴力赋值私有
Object rs = method.invoke(a,参数);a是无参时参数省略 执行并返回值 无返回值为null

注解 如@Override @Test 本质接口
文件Annotation
public @interface Anno1{
String an();//类型 注解名
boolean bn() default true;//de..默认值
String[] cn();
}
public @interface Anno2{
String value();//特殊属性 单独使用可省略名称
}
@Anno1(an="乐",cn={"abc","def"})
@Anno2("abc")//标记类
public class{
	@Anno(an="哈",bn=false,cn={"asd","fgh"})//标记方法
	public void use(){}
}

元注解 限定注解位置
@Target(ElementType.TYPE,ElementType.METHOD)//以下只能用于类,方法 FIELD变量 PARAMETER方法参数 CONSTRUCTOR构造器 LOCAL_VARIABLE局部变量
@Retention(RetentionPolicy.RUNTIME)//SOURCE编译不存在 CLASS(默认)运行不存在 RUNTIME运行也存在
public @interface Anno3{}

解析注解
Class a = Use.class;
c.isAnnotationPresent(Anno3.class)//是否有某个注解
Annotation anno3 = (Anno3) c.getDeclaredAnnotation(Anno3.class);
anno3.value();//名称
anno3.an();//an值 String为地址