属性文件 .properties
键值对 键不重复
Properties properties = new Properties();//Map集合
properties.load(new FileReader(路径));//加载
properties.getProperty(键);//返回值
Set<String> keys = Properties.stringPropertyNames();//所有键
propertis.forEach((k,v) -> {System.out.println(k+"->"+v)};)//所有值
properties.setProperty(键,值);
properties.store(new FileWriter(路径),注释);//新增 注释可略

XML文件 .xml 类html式
<?xml version="1.0" encoding="UTF-8" ?> 排头
<! -- 注释 -->
<根标签名>//唯一
<子标签名 id="1">
<标签名>a</标签名>
<标签名>b</标签名>
</子标签名>
<子标签名 id="2">
<标签名>c</标签名>
<标签名>d</标签名>
</子标签名>
</根标签名>
//不可写比较符
可替代
&lt; <
&gt; >
&amp; &
&apos '
&quot; "

接入xml库
java端
SAXReader saxReader = new SAXReader();
Document document = saxReader.read(路径);
Element root = document.getRootElement();
root.getName();//根标签名
root.attributeValue();
标签名.attribute("");//标签某属性,如id
Element 次子标签名 = 根标签名.element("子标签名");
次子标签名.getText("标签名");//重叠获取
属性.getName();//属性获取
标签名.attributes();标签所有属性
root.getText();//标签名内元素
root.elementText(标签名);小标签名内元素
root.elementTextTrim(标签名);小标签名内元素并去空格
List<Element> element = root.elements();全部一级标签名,含重复
List<Element> element = root.elements(标签名);//全部此一级标签名
for(Element element : elements){
System.out.println(element.getName());}
List<Element> element = root.element(标签名);当前元素下某个子元素,默认第一个
System.out.println(element.getText());
List<Attribute> attributes = 标签名.attributes();
for(Attribute attribute : attributes){
System.out.println(attribute.getName());}

写入
拼接
StringBuilder sb = new StringBuilder();
sb.append("<?xml version="1.0" encoding="UTF-8" ?>\r\n");
sb.append("<book>\r\n");
sb.append("\t<name>").append("内容").append("</name>\r\n");
sb.append("\t<author>").append("内容").append("</author>\r\n");
sb.append("\t<prince>").append(9999).append("</prince>\r\n");
sb.append("</book>\r\n");
try(BufferedWriter bw = new BufferedWriter(new FileWrite(路径));){bw.write(sb.toString());}catch(IOException e){
e.printStackTrace();}

约束书写格式 .dtd
<!ELEMENT book(na+)>//根标签book的子标签是na...
<!ELEMENT na(author,prince)>//na的子标签是author或prince
<!ELEMENT author(#PCDATA)>//author可写内容
xml内
<!DOCTYPE book SYSTEM ".dtd">
约束书写格式 .xsd
<?xml version="1.0" encoding="UTF-8" ?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
		targetNamespace="http://www.example.org/book_modify"
		elementFormDefault="qualfied">
	<element name="book">//根标签
	    <complexType>
		<sequence maxOccurs="unbounded">//标签名可重复
		    <element name="na">//子标签
		        <complexType>
			    <sequence>
				<element name="author" type="string"/>
				<element name="prince" type="double"/>
			    </sequence>
			</complexType>
		     </element>
		   </sequence>
		</complexType>
	      </element>
</schema>
xml内
<book xmls="http://www.example.org/book_modify"
	xmls:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemalLocation="http://www.example.org/book_modify 文件名.xsd">

日志
public static final Logger LOGGER = LoggerFactory.getLooger(名称);
try{
LOGGER.info("开始执行");
use(4,0);
LOGGER.info("执行结束");
}catch(Exception e){
LOGGER.error("use错误执行");
}
private static void use(int a,int b){
LOGGER.debug("变量a:"+a);
LOGGER.debug("变量b:"+b);
int c=a+b;
System.out.println("结果是:"+c);
LOGGER.info("结果是:"+c);}

级别 递增 debug执行 info重要 warn问题 error错误